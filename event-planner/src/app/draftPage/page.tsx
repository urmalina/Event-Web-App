'use client';

import React, { useState } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { CalendarIcon } from "lucide-react";

const eventTypes = [
  "–°–≤–∞–¥—å–±–∞",
  "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
  "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤",
  "–í–µ—á–µ—Ä–∏–Ω–∫–∞",
  "–§–µ—Å—Ç–∏–≤–∞–ª—å",
  "–í—ã—Å—Ç–∞–≤–∫–∞",
  "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è",
];

const CreateDraftPage = () => {
  const router = useRouter();
  const [saving, setSaving] = useState(false);
  const [title, setTitle] = useState("");
  const [type, setType] = useState("–°–≤–∞–¥—å–±–∞");
  const [guestsCount, setGuestsCount] = useState<number | null>(null);
  const [date, setDate] = useState<string>("");

  const handleSaveDraft = async () => {
    if (!title.trim()) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è");
      return;
    }

    setSaving(true);
    try {
      const res = await fetch("/api/events", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          title,
          type,
          guestsCount: guestsCount ?? undefined,
          date: date ? new Date(date) : undefined,
        }),
      });

      if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞");

      const draft = await res.json();
      alert("–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ–∑–¥–∞–Ω!");
      router.push(`/draftPage/${draft.id}`);
    } catch (err) {
      console.error(err);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫");
    } finally {
      setSaving(false);
    }
  };

  return (
    <div className="p-4 bg-gray-100 min-h-screen max-w-sm mx-auto">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <header className="flex justify-between items-center p-4 bg-white shadow-md">
        <h1 className="text-lg font-semibold">–ù–æ–≤—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫</h1>
        <button className="text-xl">üîî</button>
      </header>

      {/* –ù–∞–∑–≤–∞–Ω–∏–µ */}
      <div className="my-4">
        <label htmlFor="draft-title" className="block text-sm text-gray-700 mb-1">
          –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        </label>
        <input
          id="draft-title"
          type="text"
          placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          className="p-2 rounded border w-full"
        />
      </div>

      {/* –¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è */}
      <div className="flex space-x-2 mb-4 overflow-x-auto">
        {eventTypes.map((event) => (
          <Button
            key={event}
            onClick={() => setType(event)}
            className={`flex-shrink-0 ${type === event ? "bg-[#E1C01E] text-white" : "border"}`}
            variant={type === event ? "default" : "outline"}
          >
            {event}
          </Button>
        ))}
      </div>

      {/* –î–∞—Ç–∞ –∏ –≥–æ—Å—Ç–∏ */}
      <div className="space-y-4 mb-4">
        <div className="flex items-center gap-2">
          <label htmlFor="event-date" className="text-sm text-gray-700 flex items-center gap-1">
            <CalendarIcon className="w-4 h-4" /> –î–∞—Ç–∞:
          </label>
          <input
            id="event-date"
            type="date"
            value={date}
            onChange={(e) => setDate(e.target.value)}
            className="p-2 rounded border w-full"
          />
        </div>
        <div className="flex items-center gap-2">
          <label htmlFor="guests" className="text-sm text-gray-700">
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:
          </label>
          <input
            id="guests"
            type="number"
            min={1}
            value={guestsCount ?? ""}
            onChange={(e) => setGuestsCount(parseInt(e.target.value))}
            className="p-2 rounded border w-full"
          />
        </div>
      </div>

      {/* –ü–ª–æ—â–∞–¥–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è */}
      <h2 className="text-lg font-semibold mt-6">–ü–ª–æ—â–∞–¥–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</h2>
      <Card
        onClick={() => alert("–í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–ª–æ—â–∞–¥–∫—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞")}
        className="cursor-not-allowed mb-4 bg-gray-200 border-dashed border text-gray-500"
      >
        <CardContent className="p-4 flex items-center gap-4">
          <div className="w-16 h-16 bg-gray-300 rounded" />
          <div>
            <p className="font-medium">–í—ã–±—Ä–∞—Ç—å –ø–ª–æ—â–∞–¥–∫—É</p>
            <p className="text-sm">–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è</p>
          </div>
        </CardContent>
      </Card>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ */}
      <div className="flex items-center justify-between mt-6 mb-2">
        <h2 className="text-lg font-semibold">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏</h2>
        <Button
          variant="ghost"
          size="icon"
          className="text-gray-400 cursor-not-allowed"
          onClick={() => alert("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞")}
        >
          <span className="text-2xl leading-none">Ôºã</span>
        </Button>
      </div>

      {/* –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –∫–Ω–æ–ø–∫–∏ */}
      <div className="flex justify-between items-center px-2 mt-6 mb-2">
        <p className="text-sm text-gray-600">–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</p>
        <p className="font-semibold text-gray-800">0 ‚ÇΩ</p>
      </div>

      <div className="space-y-2">
        <Button
          onClick={handleSaveDraft}
          className="w-full bg-[#E1C01E] text-white"
          disabled={saving}
        >
          {saving ? "–°–æ–∑–¥–∞—ë–º..." : "–°–æ–∑–¥–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫"}
        </Button>
      </div>
    </div>
  );
};

export default CreateDraftPage;

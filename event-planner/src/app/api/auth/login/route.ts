import { NextResponse } from "next/server";
import prisma from "@/lib/prisma";
import bcrypt from "bcrypt";
import { cookies } from "next/headers";

export async function POST(req: Request) {
  try {
    const { email, password } = await req.json();

    const user = await prisma.user.findUnique({ where: { email } });

    if (!user) {
      return NextResponse.json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" }, { status: 404 });
    }

    const isValid = await bcrypt.compare(password, user.password);
    if (!isValid) {
      return NextResponse.json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" }, { status: 401 });
    }

    // 1Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º –æ—Ç–≤–µ—Ç
    const response = NextResponse.json({
      message: "–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏!",
      role: user.role,
    });

    // 2Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—â–∏—â—ë–Ω–Ω—É—é session cookie
    response.cookies.set("session", JSON.stringify({
      userId: user.id,
      email: user.email,
      role: user.role,
    }), {
      httpOnly: true, // üîê –±–µ–∑–æ–ø–∞—Å–Ω–æ, –Ω–µ –≤–∏–¥–Ω–æ –≤ JS
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
      path: "/",
      maxAge: 60 * 60 * 24,
    });

    // 3Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π cookie –¥–ª—è UI
    response.cookies.set("role", user.role.toLowerCase(), {
      httpOnly: false, // ‚úÖ —á–∏—Ç–∞–µ—Ç—Å—è –≤ document.cookie
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
      path: "/",
      maxAge: 60 * 60 * 24,
    });

    return response;

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
    return NextResponse.json({ message: "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ" }, { status: 500 });
  }
}
